rule agglomerate_sample_paired:
   input:
       rules.Decontaminated.output
   output:
       temp(str(ASSEMBLY_FP/'coassembly'/'agglomerate'/'{sample}_R{rp}.fastq'))
   threads: Cfg['sbx_coassembly']['threads']
   shell:
       """
       pigz -d -c {input} > {output} 
       """

rule check_agglomeration_paired:
    input:
        expand(str(ASSEMBLY_FP/'coassembly'/'agglomerate'/'{sample}_R{rp}.fastq'), sample=Samples.keys(), rp=[1,2])
    output:
        r1 = str(ASSEMBLY_FP/'coassembly'/'fastq'/'all_R1.fastq.gz'),
        r2 = str(ASSEMBLY_FP/'coassembly'/'fastq'/'all_R2.fastq.gz')
    params:
        fqdir = str(ASSEMBLY_FP/'coassembly'/'agglomerate')
    threads: Cfg['sbx_coassembly']['threads']
    shell:
        """
        cat {params.fqdir}/*_R1.fastq | pigz -p {threads} > {output.r1}
        cat {params.fqdir}/*_R2.fastq | pigz -p {threads} > {output.r2}
        """

rule coassemble_paired:
    input:
        r1 = str(ASSEMBLY_FP/'coassembly'/'fastq'/'all_R1.fastq.gz'),
        r2 = str(ASSEMBLY_FP/'coassembly'/'fastq'/'all_R2.fastq.gz')
    output:
        str(ASSEMBLY_FP/'coassembly'/'contigs_coassembled.fa')
    params:
        assembly_dir = str(ASSEMBLY_FP/'coassembly'/'assembly')
    threads: Cfg['sbx_coassembly']['threads']
    shell:
        """
        megahit -1 {input.r1} -2 {input.r2} -t {threads} -o {params.assembly_dir}
        mv {params.assembly_dir}/final.contigs.fa {output}
        """

rule all_coassemble:
    input:
        str(ASSEMBLY_FP/'coassembly'/'contigs_coassembled.fa')


