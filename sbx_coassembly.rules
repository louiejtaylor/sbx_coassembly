rule agglomerate_sample_paired:
   input:
       rules.Decontaminated.output
   output:
       str(ASSEMBLY_FP/'coassembly'/'agglomerate'/'{sample}_{rp}.done')
   shell:
       """
       cat {input}
       """

rule check_agglomeration_paired:
    input:
        expand(str(ASSEMBLY_FP/'coassembly'/'agglomerate'/'{sample}_{rp}.done'), sample=Samples.keys(), rp=[1,2])

    params:
        r1 = str(ASSEMBLY_FP/'coassembly'/'fastq'/'all_R1.fastq'),
        r2 = str(ASSEMBLY_FP/'coassembly'/'fastq'/'all_R2.fastq')
    threads: 4
    shell:
        """
        """

rule coassemble_paired:
    input:
        r1 = str(ASSEMBLY_FP/'coassembly'/'fastq'/'all_R1.fastq.gz'),
        r2 = str(ASSEMBLY_FP/'coassembly'/'fastq'/'all_R2.fastq.gz')
    output:
        str(ASSEMBLY_FP/'coassembly'/'contigs_coassembled.fa')
    params:
        assembly_dir = str(ASSEMBLY_FP/'coassembly'/'assembly')
    shell:
        """
        megahit -1 {input.r1} -2 {input.r2} -o {params.assembly_dir}
        mv {params.assembly_dir}/final.contigs.fa {output}
        """

rule all_coassemble:
    input:
        str(ASSEMBLY_FP/'coassembly'/'contigs_coassembled.fa')

